:host {
    box-sizing: border-box;
    position: relative;
    display: inline-block;
    min-width: 300px;
    height: 0;
    padding-bottom: 56.25%;
    background: var(--theoplayer-background, #000);

    container-name: theoplayer-ui-container;
    container-type: size;
}

:host([hidden]) {
    display: none !important;
}

@define-mixin fullscreen-styles {
    /* Needs to use !important otherwise easy to break */
    width: 100% !important;
    height: 100% !important;
    padding: 0 !important;
}

:host([fullscreen]) {
    @mixin fullscreen-styles;
}

/* Safari and IE need this to actually make the element fill the window */
:host(:fullscreen) {
    @mixin fullscreen-styles;
}

:host([fluid]) {
    padding-bottom: calc(100% * var(--theoplayer-video-height, 9) / var(--theoplayer-video-width, 16));
}

[part~='chrome'] {
    position: relative;
}

[part~='layer'] {
    position: absolute;
    inset: 0;
    z-index: 0;
}

[part~='layer']:not([part~='media-layer']),
[part~='chrome'] {
    display: flex;
}

/*
 * Disable pointer events on all layers,
 * but re-enable them on all elements slotted into those layers.
 */
[part~='gesture-layer'],
[part~='vertical-layer'],
[part~='chrome'] {
    pointer-events: none;
}

[part~='chrome'] ::slotted(*) {
    pointer-events: auto;
}

[part~='media-layer'] video {
    border-radius: var(--theoplayer-video-border-radius);
    object-fit: var(--theoplayer-video-object-fit);
}

/*
 * Hack: THEOplayer's own linear ad UI is not positioned correctly by default
 * when using the chromeless player.
 */
[part~='media-layer'] .theoplayer-ad-linear {
    position: absolute;
    inset: 0;
    z-index: 10;
}

/*
 * Hack: hide THEOplayer's built-in ad UI, so we can use our own components instead
 * such as <theoplayer-ad-countdown> and <theoplayer-ad-skip-button>.
 */
[part~='media-layer'] .theo-ad-remaining-container,
[part~='media-layer'] .theoplayer-ad-skip,
[part~='media-layer'] .theoplayer-ad-touch-clickthrough {
    display: none !important;
}

[part~='vertical-layer'],
[part~='chrome'] {
    flex-flow: column nowrap;
    align-items: stretch;
}

[part~='centered'] {
    align-items: center;
    justify-content: center;
}

[part~='middle'] {
    flex-grow: 1;
}

[part~='vertical-layer']::before {
    content: '';
    position: absolute;
    inset: 0;
    background: var(--theoplayer-control-backdrop-background, transparent);
    pointer-events: none;
}

:host(:not([mobile]):not([tv])) [part~='menu-layer'] {
    top: var(--theoplayer-menu-offset-top, 0);
    bottom: var(--theoplayer-menu-offset-bottom, 0);
    padding: var(--theoplayer-menu-layer-padding, 10px);
}

[part='menu'] {
    display: flex;
    justify-self: stretch;
    background: var(--theoplayer-menu-backdrop-background, rgba(0, 0, 0, 0.5));
}

[part='menu'] ::slotted(*) {
    align-self: stretch;
    justify-self: stretch;
    flex-grow: 1;
}

:host(:not([mobile])) [part='menu'] {
    /* Align to bottom right by default */
    margin-top: var(--theoplayer-menu-margin-top, auto);
    margin-bottom: var(--theoplayer-menu-margin-bottom, 0);
    margin-left: var(--theoplayer-menu-margin-left, auto);
    margin-right: var(--theoplayer-menu-margin-right, 0);
    /* Do not exceed container height */
    max-height: 100%;
    /* Avoid narrow menus */
    min-width: var(--theoplayer-menu-min-width, 200px);
}

@define-mixin menu-fill-styles {
    /* Reset styles from desktop */
    margin: 0;
    min-width: auto;
    /* Fill entire player */
    align-self: stretch;
    flex-grow: 1;
    /* Close menu when clicking on empty area of menu */
    pointer-events: none;
}

/* On mobile, make menu fill entire player */
:host([mobile]) [part='menu'] {
    @mixin menu-fill-styles;
}

:host([tv]) [part~='menu-layer'] {
    left: auto;
}

:host([tv]) [part='menu'] {
    @mixin menu-fill-styles;
}

:host(:not([menu-opened])) [part~='menu-layer'],
:host([menu-opened][tv]) [part~='vertical-layer'],
:host([menu-opened][mobile]) [part~='vertical-layer'] {
    display: none !important;
}

/* When player is small, make menu fill entire player */
@container theoplayer-ui-container (max-width: 500px) {
    :host(:not([mobile])) [part~='menu-layer'] {
        /* Reset styles from desktop */
        inset: 0;
        padding: 0;
    }

    :host(:not([mobile])) [part='menu'] {
        @mixin menu-fill-styles;
    }

    :host([menu-opened]) [part~='vertical-layer'] {
        display: none !important;
    }
}

[part~='error-layer'] {
    align-items: center;
    justify-content: center;
    background: var(--theoplayer-error-background, rgba(0, 0, 0, 0.5));
}

:host(:not([has-error])) [part~='error-layer'],
:host([has-error]) [part~='layer']:not([part~='media-layer']):not([part~='error-layer']) {
    display: none !important;
}

[part~='chrome'] ::slotted(theoplayer-control-bar) {
    align-self: stretch;
}

theoplayer-gesture-receiver {
    flex-grow: 1;
}

/*
 * Mobile-only and mobile-hidden elements
 */
:host([mobile]) [part~='chrome'] ::slotted([mobile-hidden]),
:host(:not([mobile])) [part~='chrome'] ::slotted([mobile-only]) {
    display: none !important;
}

/*
 * TV-only and TV-hidden elements
 */
:host([tv]) [part~='chrome'] ::slotted([tv-hidden]),
:host(:not([tv])) [part~='chrome'] ::slotted([tv-only]) {
    display: none !important;
}

/*
 * Live-only and live-hidden elements
 */
:host(:not([stream-type='vod'])) [part~='chrome'] ::slotted([live-hidden]),
:host([stream-type='vod']) [part~='chrome'] ::slotted([live-only]) {
    display: none !important;
}

/*
 * Ad-only and ad-hidden elements
 */
:host([playing-ad]) [part~='chrome'] ::slotted([ad-hidden]),
:host(:not([playing-ad])) [part~='chrome'] ::slotted([ad-only]) {
    display: none !important;
}

/*
 * Hide cursor when user is idle
 */
:host([user-idle]:not([paused]):not([casting]):not([menu-opened])) {
    cursor: none;
}

/*
 * Auto-hide elements when user is idle
 */
:host([user-idle]:not([paused]):not([casting]):not([menu-opened])) [part~='chrome'] ::slotted(:not([no-auto-hide])) {
    opacity: 0;
    transition: opacity 1s;
}

/*
 * Hide control background when user is idle
 */
:host([user-idle]:not([paused]):not([casting]):not([menu-opened])) [part~='vertical-layer']::before {
    opacity: 0;
    transition: opacity 1s;
}
